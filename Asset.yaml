openapi: 3.0.0
info:
  title: Data Catalog Asset Service API
  version: '1.0'
  description: |-
    The asset handling service of the Data Catalog application.

    Provides API endpoints to create, delete, and modify assets. It also manages the access rights to the assets, as private assets are only available to users that are members of it.
  contact:
    name: Szilárd Tumó
    email: szilard.tumo@stud.ubbcluj.ro
servers:
  - url: 'https://assethandlingservice.azurewebsites.net'
paths:
  /assets:
    get:
      summary: Get all assets
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/AssetResponse.yaml
              examples: {}
      operationId: getAssets
      description: |-
        Lists all the assets available to the authenticated user:

        - if no authentication is present, only public assets will be returned.
        - if authentication is provided, public assets, and private assets that the authenticated user has access rights to, will be returned.
      parameters: []
    post:
      summary: Create an asset
      operationId: createAsset
      responses:
        '201':
          description: Created
        '422':
          description: Unprocessable Entity
          headers: {}
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      description: |-
        Create an asset. The user must be authenticated to be able to create an asset.

        Curently supported source locations are: 
         - URL
         - Azure Blob Storage.
         
         Currently supported data formats are:
         - JSON
         - CSV
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/AssetCreationRequest.yaml
            examples:
              example-1:
                value:
                  name: Iris Dataset
                  description: 'This is perhaps the best known database to be found in the pattern recognition literature. Fisher''s paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.'
                  shortDescription: This is perhaps the best known database to be found in the pattern recognition literature.
                  location:
                    type: url
                    parameters:
                      - key: permissions
                        value: read$list
                  tags:
                    - multivariate
                  format: csv
                  namespace: flowerproject
                  isPublic: true
        description: The asset to be created.
      tags:
        - Asset
    parameters: []
  '/assets/{assetId}':
    parameters:
      - schema:
          type: string
        name: assetId
        in: path
        description: The ID of the asset.
        required: true
    get:
      summary: Get asset by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/AssetResponse.yaml
              examples: {}
        '404':
          description: Not Found
      operationId: getAsset
      tags:
        - Asset
      description: |-
        Returns the asset which ID corresponds to the ID provided.

        If the asset is not public, it requires authentication, and correct access rights to be able to retrieve the asset.
    delete:
      summary: Delete asset by ID
      operationId: deleteAsset
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: |-
        Delete the asset which ID corresponds to the ID provided.

        Requires authentication and correct access rights to perform the deletion.

        A response with status code of `204` with empty resonse body indicates that the deletion was successful.
      tags:
        - Asset
    patch:
      summary: Update asset by ID
      operationId: patchAsset
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      description: |-
        Update the asset which ID corresponds to the ID provided.

        Only the attributes specified in the HTTP body will be modified. The attributes which are not specified will **not** change.

        Requires authentication and correct access rights to be able to update the asset.

        Possible response codes:
         - `204`: The update was successful.
         - `404`: There is no asset found with the provided ID.
         - `422`: The object provided in the request body is malformed. A detailed explanation can be found in the response body. The asset will not be updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/AssetUpdateRequest.yaml
            examples:
              example-1:
                value:
                  description: Updated description.
        description: ''
      tags:
        - Asset
  '/assets/{assetId}/tags/{tag}':
    parameters:
      - schema:
          type: string
          minLength: 1
        name: tag
        in: path
        required: true
        description: The name of the tag.
      - schema:
          type: string
        name: assetId
        in: path
        required: true
        description: The ID of the asset.
    delete:
      summary: Delete tag from asset
      operationId: deleteTag
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: |-
        Deletes the tag from the asset which ID corresponds to the ID provided.

        A status code of `204` with an empty body indicates that the operation was successful.
        If the tag was not present in the first place, a status code of `204` will be returned.
      tags:
        - Asset
    post:
      summary: Add tag to asset
      operationId: addTag
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: |-
        Adds the tag to the asset which ID corresponds to the ID provided.

        A status code of `204` with an empty body indicates that the operation was successful.
        If the tag is already present, it will not be added again, and a status code of `204` will be returned.
      tags:
        - Asset
  '/assets/search/{keyword}':
    parameters:
      - schema:
          type: string
        name: keyword
        in: path
        required: true
        description: The keyword to search by. It searches in the name of the asset.
    get:
      summary: Search assets by keyword
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/AssetResponse.yaml
              examples: {}
      operationId: searchAssets
      description: |
        List the assets which names contain the given keyword and other search criteria:
         - if the ownerId is defined, only assets which are owned by the user with the specified ID are returned. 
         - if tags are defined, only assets which contain at least one of the specified tags will be returned.
         
         Authentication:

        - if no authentication is present, only public assets will be returned.
        - if authentication is provided, public assets, and private assets that the authenticated user has access rights to, will be returned. 
      parameters:
        - schema:
            type: array
            items:
              type: string
            uniqueItems: true
            example:
              - multivariate
              - real
          in: query
          description: Filter by tags.
          name: tags
          style: form
        - schema:
            type: string
          in: query
          name: owner
          description: Filter by owner.
  /user/assets:
    get:
      summary: Get assets owned by the authenticated user
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/AssetResponse.yaml
      operationId: getUserAssets
      description: |-
        Lists all the assets owned by the authenticated user.

        Requires authentication to be able to perform the request.
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: Bearer <token>
      description: Authentication is made by the JWT token sent in the Authorization header of the request.
    ApiKey:
      name: Authorization
      type: apiKey
      in: header
      description: 'Authentication is made by the API key sent in the Authorization header of the request, in the following format: `Bearer <api_key>`.'
tags:
  - name: Asset
    x-displayName: Asset Management
security:
  - JWT: []
  - ApiKey: []
