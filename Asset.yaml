openapi: 3.0.0
info:
  title: Asset
  version: '1.0'
  description: Data Catalog Asset API.
  contact:
    name: Kata SÃ¡ra Cseke
    email: katacseke@gmail.com
servers:
  - url: 'http://localhost:3000'
paths:
  /assets:
    get:
      summary: Get all assets
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/AssetResponse.yaml
              examples:
                example-1:
                  value:
                    - id: string
                      createdAt: '2019-08-24T14:15:22Z'
                      updatedAt: '2019-08-24T14:15:22Z'
                      ownerId: string
                      name: Iris Dataset
                      description: 'This is perhaps the best known database to be found in the pattern recognition literature. Fisher''s paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.'
                      shortDescription: This is perhaps the best known database to be found in the pattern recognition literature.
                      location:
                        type: url
                        parameters:
                          - key: permissions
                            value: read$list
                      format: csv
                      namespace: flowerproject
      operationId: getAssets
      description: |-
        List all the data assets.
        `tags` and `namespace` query params are deprecated, please use the `/assets/search` endpoint instead.
      parameters:
        - schema:
            type: array
            items:
              type: string
            uniqueItems: true
            example:
              - multivariate
              - real
          in: query
          description: Filter by tags.
          name: tags
          style: form
          deprecated: true
        - schema:
            type: string
            example: flowerproject
          in: query
          name: namespace
          description: Filter by namespace.
          deprecated: true
    post:
      summary: Create an asset
      operationId: createAsset
      responses:
        '201':
          description: Created
        '422':
          description: Unprocessable Entity
          headers: {}
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      description: Create a data asset.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/AssetCreationRequest.yaml
            examples:
              example-1:
                value:
                  name: Iris Dataset
                  description: 'This is perhaps the best known database to be found in the pattern recognition literature. Fisher''s paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.'
                  shortDescription: This is perhaps the best known database to be found in the pattern recognition literature.
                  location:
                    type: url
                    parameters:
                      - key: permissions
                        value: read$list
                  tags:
                    - multivariate
                  format: csv
                  namespace: flowerproject
                  public: true
        description: The data asset to be created.
      tags:
        - Asset
      security:
        - JWT: []
    parameters: []
  '/assets/{assetId}':
    parameters:
      - schema:
          type: string
        name: assetId
        in: path
        description: |
          The unique identifier of the asset.
        required: true
    get:
      summary: Get asset by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./definitions/AssetResponse.yaml
              examples:
                example-1:
                  value:
                    id: string
                    createdAt: '2019-08-24T14:15:22Z'
                    updatedAt: '2019-08-24T14:15:22Z'
                    ownerId: string
                    name: Iris Dataset
                    description: 'This is perhaps the best known database to be found in the pattern recognition literature. Fisher''s paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.'
                    shortDescription: This is perhaps the best known database to be found in the pattern recognition literature.
                    location:
                      type: url
                      parameters:
                        - key: permissions
                          value: read$list
                    format: csv
                    namespace: flowerproject
        '404':
          description: Not Found
      operationId: getAsset
      tags:
        - Asset
      description: Get asset by ID.
    delete:
      summary: Delete asset by ID
      operationId: deleteAsset
      responses:
        '204':
          description: Asset was deleted successfully.
        '404':
          description: Not Found
      description: Delete asset.
      tags:
        - Asset
      security:
        - JWT: []
    patch:
      summary: Update asset by ID
      operationId: patchAsset
      responses:
        '204':
          description: Changes were made successfully.
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: ./definitions/ErrorResponse.yaml
      description: Update only the given attributes of the asset. The attributes which are not specified in the body will not change.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./definitions/AssetUpdateRequest.yaml
            examples:
              example-1:
                value:
                  description: Updated description.
        description: Specify only the attributes which you want to update.
      tags:
        - Asset
      security:
        - JWT: []
  '/assets/{assetId}/tags/{tag}':
    parameters:
      - schema:
          type: string
          minLength: 1
        name: tag
        in: path
        required: true
        description: The name of the tag.
      - schema:
          type: string
        name: assetId
        in: path
        required: true
        description: The unique identifier of the asset.
    delete:
      summary: Delete tag from asset
      operationId: deleteTag
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: Delete the specified tag from the asset.
      tags:
        - Asset
      security:
        - JWT: []
    post:
      summary: Add tag to asset
      operationId: addTag
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: 'Adds the tag to the given asset. If the tag is already present, it will remain the same, and `200` status will be returned.'
      tags:
        - Asset
      security:
        - JWT: []
  '/assets/search/{keyword}':
    parameters:
      - schema:
          type: string
        name: keyword
        in: path
        required: true
        description: The keyword to search by. It searches in the name of the asset.
    get:
      summary: Search assets
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/AssetResponse.yaml
              examples: {}
      operationId: searchAssets
      description: |
        List the assets which match the given keyword and optional query parameters.
      parameters:
        - schema:
            type: array
            items:
              type: string
            uniqueItems: true
            example:
              - multivariate
              - real
          in: query
          description: Filter by tags.
          name: tags
          style: form
        - schema:
            type: string
            example: flowerproject
          in: query
          name: namespace
          description: Filter by namespace.
        - schema:
            type: string
          in: query
          name: owner
          description: Filter by owner.
  /assets/favorites:
    get:
      summary: List favorite assets
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/AssetResponse.yaml
      operationId: getFavoriteAssets
      description: Lists the favorite assets of the currently logged in user.
      security:
        - JWT: []
  '/assets/favorites/{assetId}':
    parameters:
      - schema:
          type: string
        name: assetId
        in: path
        required: true
        description: The id of the asset to add to the favorites.
    post:
      summary: Add asset to favorites
      operationId: addFavoriteAsset
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: |-
        Adds the asset to the currently logged in user's favorites.
        Responds with `404` if the asset is not found.
      security:
        - JWT: []
      tags:
        - Asset
  /user/assets:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./definitions/AssetResponse.yaml
      operationId: getUserAssets
      description: 'Returns a list of assets which is owned by the logged in user, or is a member of the asset.'
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authentication is made by the JWT token sent in the Authorizationheader of the request.
tags:
  - name: Asset
security:
  - JWT: []
