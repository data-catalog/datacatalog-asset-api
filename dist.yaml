openapi: 3.0.0
info:
  title: Data Catalog Asset Service API
  version: '1.0'
  description: >-
    The asset handling service of the Data Catalog application.


    Provides API endpoints to create, delete, and modify assets. It also manages
    the access rights to the assets, as private assets are only available to
    users that are members of it.
  contact:
    name: Szilárd Tumó
    email: szilard.tumo@stud.ubbcluj.ro
  license:
    name: MIT
    url: >-
      https://raw.githubusercontent.com/data-catalog/datacatalog-asset-api/master/LICENSE
servers:
  - url: 'https://assethandlingservice.azurewebsites.net'
paths:
  /assets:
    get:
      summary: Get all assets
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetResponse'
              examples: {}
      operationId: getAssets
      description: >-
        Lists all the assets available to the authenticated user:


        - if no authentication is present, only public assets will be returned.

        - if authentication is provided, public assets, and private assets that
        the authenticated user has access rights to, will be returned.
      parameters: []
    post:
      summary: Create an asset
      operationId: createAsset
      responses:
        '201':
          description: Created
        '422':
          description: Unprocessable Entity
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: >-
        Create an asset. The user must be authenticated to be able to create an
        asset.


        Curently supported source locations are: 
         - URL
         - Azure Blob Storage.
         
         Currently supported data formats are:
         - JSON
         - CSV
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreationRequest'
            examples:
              example-1:
                value:
                  name: Iris Dataset
                  description: >-
                    This is perhaps the best known database to be found in the
                    pattern recognition literature. Fisher's paper is a classic
                    in the field and is referenced frequently to this day. (See
                    Duda & Hart, for example.) The data set contains 3 classes
                    of 50 instances each, where each class refers to a type of
                    iris plant. One class is linearly separable from the other
                    2; the latter are NOT linearly separable from each other.
                  shortDescription: >-
                    This is perhaps the best known database to be found in the
                    pattern recognition literature.
                  location:
                    type: url
                    parameters:
                      - key: permissions
                        value: read$list
                  tags:
                    - multivariate
                  format: csv
                  isPublic: true
        description: The asset to be created.
      tags:
        - Asset
    parameters: []
  '/assets/{assetId}':
    parameters:
      - schema:
          type: string
        name: assetId
        in: path
        description: The ID of the asset.
        required: true
    get:
      summary: Get asset by ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
              examples: {}
        '404':
          description: Not Found
      operationId: getAsset
      tags:
        - Asset
      description: >-
        Returns the asset which ID corresponds to the ID provided.


        If the asset is not public, it requires authentication, and correct
        access rights to be able to retrieve the asset.
    delete:
      summary: Delete asset by ID
      operationId: deleteAsset
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: >-
        Delete the asset which ID corresponds to the ID provided.


        Requires authentication and correct access rights to perform the
        deletion.


        A response with status code of `204` with empty resonse body indicates
        that the deletion was successful.
      tags:
        - Asset
    patch:
      summary: Update asset by ID
      operationId: patchAsset
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: >-
        Update the asset which ID corresponds to the ID provided.


        Only the attributes specified in the HTTP body will be modified. The
        attributes which are not specified will **not** change.


        Requires authentication and correct access rights to be able to update
        the asset.


        Possible response codes:
         - `204`: The update was successful.
         - `404`: There is no asset found with the provided ID.
         - `422`: The object provided in the request body is malformed. A detailed explanation can be found in the response body. The asset will not be updated.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetUpdateRequest'
            examples:
              example-1:
                value:
                  description: Updated description.
        description: ''
      tags:
        - Asset
  '/assets/{assetId}/tags/{tag}':
    parameters:
      - schema:
          type: string
          minLength: 1
        name: tag
        in: path
        required: true
        description: The name of the tag.
      - schema:
          type: string
        name: assetId
        in: path
        required: true
        description: The ID of the asset.
    delete:
      summary: Delete tag from asset
      operationId: deleteTag
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: >-
        Deletes the tag from the asset which ID corresponds to the ID provided.


        A status code of `204` with an empty body indicates that the operation
        was successful.

        If the tag was not present in the first place, a status code of `204`
        will be returned.
      tags:
        - Asset
    post:
      summary: Add tag to asset
      operationId: addTag
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
      description: >-
        Adds the tag to the asset which ID corresponds to the ID provided.


        A status code of `204` with an empty body indicates that the operation
        was successful.

        If the tag is already present, it will not be added again, and a status
        code of `204` will be returned.
      tags:
        - Asset
  '/assets/search/{keyword}':
    parameters:
      - schema:
          type: string
        name: keyword
        in: path
        required: true
        description: The keyword to search by. It searches in the name of the asset.
    get:
      summary: Search assets by keyword
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetResponse'
              examples: {}
      operationId: searchAssets
      description: >
        List the assets which names contain the given keyword and other search
        criteria:
         - if the ownerId is defined, only assets which are owned by the user with the specified ID are returned. 
         - if tags are defined, only assets which contain at least one of the specified tags will be returned.
         
         Authentication:

        - if no authentication is present, only public assets will be returned.

        - if authentication is provided, public assets, and private assets that
        the authenticated user has access rights to, will be returned.
      parameters:
        - schema:
            type: array
            items:
              type: string
            uniqueItems: true
            example:
              - multivariate
              - real
          in: query
          description: Filter by tags.
          name: tags
          style: form
        - schema:
            type: string
          in: query
          name: owner
          description: Filter by owner.
  /user/assets:
    get:
      summary: Get assets owned by the authenticated user
      tags:
        - Asset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssetResponse'
      operationId: getUserAssets
      description: |-
        Lists all the assets owned by the authenticated user.

        Requires authentication to be able to perform the request.
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: Bearer <token>
      description: >-
        Authentication is made by the JWT token sent in the Authorization header
        of the request.
    ApiKey:
      name: Authorization
      type: apiKey
      in: header
      description: >-
        Authentication is made by the API key sent in the Authorization header
        of the request, in the following format: `Bearer <api_key>`.
  schemas:
    ParameterDto:
      title: Parameter
      type: object
      description: Parameter in the form of key-value pair.
      properties:
        key:
          type: string
          description: The key of the parameter.
          example: permissions
          maxLength: 256
        value:
          type: string
          description: The value of the parameter
          example: read$list
      required:
        - key
        - value
    LocationResponse:
      title: LocationResponse
      type: object
      description: ''
      x-examples: {}
      properties:
        type:
          type: string
          description: The location type.
          example: url
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDto'
    AssetResponse:
      title: AssetResponse
      description: ''
      x-examples:
        Example response:
          id: 6085b0d0c94921e9f9c9e7fc
          createdAt: '2019-08-24T14:15:22Z'
          updatedAt: '2019-08-24T14:15:22Z'
          ownerId: 6085b0dec79cdfe443c8f71d
          name: Iris Dataset
          description: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature. Fisher's paper is a classic in the field and
            is referenced frequently to this day. <i>(See Duda & Hart, for
            example.)</i> The data set contains 3 classes of 50 instances each,
            where each class refers to a type of iris plant. One class is
            linearly separable from the other 2; the latter are
            <strong>NOT</strong> linearly separable from each other.
          shortDescription: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature.
          location:
            type: url
            parameters:
              - key: url
                value: >-
                  https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data
          tags:
            - multivariate
          format: csv
          isPublic: true
          members: []
      type: object
      properties:
        id:
          type: string
          description: The ID of the asset.
        createdAt:
          type: string
          description: Date of creation.
          format: date-time
        updatedAt:
          type: string
          format: date-time
          description: Date of the last update.
        ownerId:
          type: string
          description: The ID of the user who owns the asset.
        name:
          type: string
          description: A name of the asset.
          minLength: 3
          maxLength: 120
        description:
          type: string
          description: >-
            A longer description about the content of the asset. Supports rich
            text formatting.
          minLength: 3
        shortDescription:
          type: string
          example: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature.
          maxLength: 300
          description: Short description breifly defining the contents of the asset.
        location:
          $ref: '#/components/schemas/LocationResponse'
        tags:
          type: array
          uniqueItems: true
          description: A list of keywords assigned to the asset.
          items:
            type: string
        format:
          type: string
          enum:
            - csv
            - json
          description: The file format of the asset.
        isPublic:
          type: boolean
          description: Whether the asset is accessible by anyone or not.
        members:
          type: array
          description: The IDs of the users which the asset is accessible for.
          uniqueItems: true
          items:
            type: string
    LocationCreationRequest:
      title: LocationCreationRequest
      type: object
      description: ''
      x-examples: {}
      properties:
        type:
          type: string
          description: The location type.
          example: url
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDto'
      required:
        - type
        - parameters
    AssetCreationRequest:
      title: AssetCreationRequest
      type: object
      description: ''
      x-examples:
        Example request:
          name: Iris Dataset
          description: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature. Fisher's paper is a classic in the field and
            is referenced frequently to this day. <i>(See Duda & Hart, for
            example.)</i> The data set contains 3 classes of 50 instances each,
            where each class refers to a type of iris plant. One class is
            linearly separable from the other 2; the latter are
            <strong>NOT</strong> linearly separable from each other.
          shortDescription: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature.
          location:
            type: url
            parameters:
              - key: url
                value: >-
                  https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data
          tags:
            - multivariate
          format: csv
          isPublic: true
      properties:
        name:
          type: string
          example: Iris Dataset
          description: The name of the data asset.
          maxLength: 256
        description:
          type: string
          example: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature. Fisher's paper is a classic in the field and
            is referenced frequently to this day. (See Duda & Hart, for
            example.) The data set contains 3 classes of 50 instances each,
            where each class refers to a type of iris plant. One class is
            linearly separable from the other 2; the latter are NOT linearly
            separable from each other.
          description: >-
            A longer description about the content of the asset. Supports rich
            text formatting.
        shortDescription:
          type: string
          example: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature.
          maxLength: 512
          description: Short description breifly defining the contents of the asset.
        location:
          $ref: '#/components/schemas/LocationCreationRequest'
        tags:
          type: array
          uniqueItems: true
          description: A list of keywords assigned to the asset.
          items:
            type: string
            example: multivariate
        format:
          type: string
          example: csv
          enum:
            - csv
            - json
          description: |
            The file format of the asset.
        isPublic:
          type: boolean
          description: Whether the asset is accessible by anyone or not.
      required:
        - name
        - description
        - location
        - format
        - isPublic
    ErrorResponse:
      title: ErrorResponse
      type: object
      description: ''
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time of the error.
        status:
          type: integer
          description: The status code of the response.
          example: 200
        error:
          type: string
          description: The status description of the response.
          example: Bad Request
        message:
          type: object
          description: >-
            An object containing the erros, with the field name as key, and the
            error cause as value.
        path:
          type: string
          example: /assets
          description: The path at which the request was sent.
      required:
        - status
    LocationUpdateRequest:
      title: LocationUpdateRequest
      type: object
      description: ''
      x-examples: {}
      properties:
        type:
          type: string
          description: The location type.
          example: url
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDto'
    AssetUpdateRequest:
      title: AssetUpdateRequest
      type: object
      description: >-
        The model of a data asset which is sent from the client to the server
        when updating.
      x-examples:
        Example request:
          shortDescription: Only the short description will be updated.
      properties:
        name:
          type: string
          example: Iris Dataset
          description: A name of the asset.
          maxLength: 256
        description:
          type: string
          example: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature. Fisher's paper is a classic in the field and
            is referenced frequently to this day. (See Duda & Hart, for
            example.) The data set contains 3 classes of 50 instances each,
            where each class refers to a type of iris plant. One class is
            linearly separable from the other 2; the latter are NOT linearly
            separable from each other.
          description: >-
            A longer description about the content of the asset. Supports rich
            text formatting.
        shortDescription:
          type: string
          example: >-
            This is perhaps the best known database to be found in the pattern
            recognition literature.
          description: Short description breifly defining the contents of the asset.
          maxLength: 512
        location:
          $ref: '#/components/schemas/LocationUpdateRequest'
        tags:
          type: array
          uniqueItems: true
          description: A list of keywords assigned to the asset.
          items:
            type: string
            example: multivariate
        format:
          type: string
          example: csv
          enum:
            - csv
            - json
          description: |
            The file format of the asset.
        isPublic:
          type: boolean
          description: Whether the asset is accessible by anyone or not.
        members:
          type: array
          description: The IDs of the users which the asset is accessible for.
          uniqueItems: true
          items:
            type: string
tags:
  - name: Asset
    x-displayName: Asset Management
    description: Manage assets.
security:
  - JWT: []
  - ApiKey: []
